```python
import numpy as np
import math
import csv
import pandas as pd
from scipy.stats import chi2
from scipy.optimize import linear_sum_assignment  # For JPDA

# Define lists to store results
r = []
el = []
az = []

# Global Track ID Database
track_id_database = [{'id': 1, 'state': 'free'}, {'id': 2, 'state': 'free'}, {'id': 3, 'state': 'free'}]  # Example with 3 IDs

class CVFilter:
    def __init__(self):
        self.Sf = np.zeros((6, 1))  # Filter state vector
        self.Pf = np.eye(6)  # Filter state covariance matrix
        self.Sp = np.zeros((6, 1))  # Predicted state vector
        self.Pp = np.eye(6)  # Predicted state covariance matrix
        self.plant_noise = 20  # Plant noise covariance
        self.H = np.eye(3, 6)  # Measurement matrix
        self.R = np.eye(3)  # Measurement noise covariance
        self.Meas_Time = 0  # Measured time
        self.prev_Time = 0
        self.Q = np.eye(6)
        self.Phi = np.eye(6)
        self.Z = np.zeros((3, 1)) 
        self.Z1 = np.zeros((3, 1))  # Measurement vector
        self.Z2 = np.zeros((3, 1)) 
        self.first_rep_flag = False
        self.second_rep_flag = False
        self.gate_threshold = 9.21  # 95% confidence interval for Chi-square distribution with 3 degrees of freedom

    def initialize_filter_state(self, x, y, z, vx, vy, vz, time):
        if not self.first_rep_flag:
            self.Z1 = np.array([[x], [y], [z]])
            self.Sf[0] = x
            self.Sf[1] = y
            self.Sf[2] = z
            self.Meas_Time = time
            self.prev_Time = self.Meas_Time
            self.first_rep_flag = True
        elif self.first_rep_flag and not self.second_rep_flag:
            self.Z2 = np.array([[x], [y], [z]])
            self.prev_Time = self.Meas_Time
            self.Meas_Time = time
            dt = self.Meas_Time - self.prev_Time
            self.vx = (self.Z1[0] - self.Z2[0]) / dt
            self.vy = (self.Z1[1] - self.Z2[1]) / dt
            self.vz = (self.Z1[2] - self.Z2[2]) / dt
            self.Meas_Time = time
            self.second_rep_flag = True
        else:
            self.Z = np.array([[x], [y], [z]])
            self.prev_Time = self.Meas_Time
            self.Meas_Time = time
    def predict_step(self, current_time):
        dt = current_time - self.prev_Time
        T_2 = (dt * dt) / 2.0
        T_3 = (dt * dt * dt) / 3.0
        self.Phi[0, 3] = dt
        self.Phi[1, 4] = dt
        self.Phi[2, 5] = dt              
        self.Q[0, 0] = T_3
        self.Q[1, 1] = T_3
        self.Q[2, 2] = T_3
        self.Q[0, 3] = T_2
        self.Q[1, 4] = T_2
        self.Q[2, 5] = T_2
        self.Q[3, 0] = T_2
        self.Q[4, 1] = T_2
        self.Q[5, 2] = T_2
        self.Q[3, 3] = dt
        self.Q[4, 4] = dt
        self.Q[5, 5] = dt
        self.Q = self.Q * self.plant_noise
        self.Sp = np.dot(self.Phi, self.Sf)
        self.Pp = np.dot(np.dot(self.Phi, self.Pf), self.Phi.T) + self.Q
        self.Meas_Time = current_time

    def update_step(self, Z):
        Inn = Z - np.dot(self.H, self.Sp)
        S = np.dot(self.H, np.dot(self.Pp, self.H.T)) + self.R
        K = np.dot(np.dot(self.Pp, self.H.T), np.linalg.inv(S))
        self.Sf = self.Sp + np.dot(K, Inn)
        self.Pf = np.dot(np.eye(6) - np.dot(K, self.H), self.Pp)


def read_measurements_from_csv(file_path):
    measurements = []
    with open(file_path, 'r') as file:
        reader = csv.reader(file)
        next(reader)  # Skip header if exists
        for row in reader:
            mr = float(row[7])  # MR column
            ma = float(row[8])  # MA column
            me = float(row[9])  # ME column
            mt = float(row[10])  # MT column
            md = float(row[11])
            x, y, z = sph2cart(ma, me, mr)  # Convert spherical to Cartesian coordinates
            measurements.append((mr, ma, me, mt, md, x, y, z))
    return measurements


def sph2cart(az, el, r):
    x = r * np.cos(el * np.pi / 180) * np.sin(az * np.pi / 180)
    y = r * np.cos(el * np.pi / 180) * np.cos(az * np.pi / 180)
    z = r * np.sin(el * np.pi / 180)
    return x, y, z


def cart2sph(x, y, z):
    r = np.sqrt(x**2 + y**2 + z**2)
    el = math.atan2(z, np.sqrt(x**2 + y**2)) * 180 / np.pi
    az = math.atan2(y, x)

    if x > 0.0:
        az = np.pi / 2 - az
    else:
        az = 3 * np.pi / 2 - az

    az = az * 180 / np.pi
    if az < 0.0:
        az = 360 + az
    if az > 360:
        az = az - 360
    return r, az, el


def form_measurement_groups(measurements, max_time_diff=0.050):
    measurement_groups = []
    current_group = []
    base_time = measurements[0][3]

    for measurement in measurements:
        if measurement[3] - base_time <= max_time_diff:
            current_group.append(measurement)
        else:
            measurement_groups.append(current_group)
            current_group = [measurement]
            base_time = measurement[3]

    if current_group:
        measurement_groups.append(current_group)

    return measurement_groups


def form_clusters_via_association(tracks, reports, kalman_filter, chi2_threshold):
    association_list = []
    cov_inv = np.linalg.inv(kalman_filter.Pp[:3, :3])  # 3x3 covariance matrix for position only

    for i, track in enumerate(tracks):
        for j, report in enumerate(reports):
            distance = mahalanobis_distance(track, report, cov_inv)
            if distance < chi2_threshold:
                association_list.append((i, j))

    clusters = []
    while association_list:
        cluster_tracks = set()
        cluster_reports = set()
        stack = [association_list.pop(0)]
        
        while stack:
            track_idx, report_idx = stack.pop()
            cluster_tracks.add(track_idx)
            cluster_reports.add(report_idx)
            new_assoc = [(t, r) for t, r in association_list if t == track_idx or r == report_idx]
            for assoc in new_assoc:
                if assoc not in stack:
                    stack.append(assoc)
            association_list = [assoc for assoc in association_list if assoc not in new_assoc]
        
        clusters.append((list(cluster_tracks), [reports[r] for r in cluster_reports]))

    return clusters


def mahalanobis_distance(track, report, cov_inv):
    residual = np.array(report) - np.array(track)
    distance = np.dot(np.dot(residual.T, cov_inv), residual)
    return distance


def select_best_report(cluster_tracks, cluster_reports, kalman_filter):
    cov_inv = np.linalg.inv(kalman_filter.Pp[:3, :3])

    best_report = None
    best_track_idx = None
    max_weight = -np.inf

    for i, track in enumerate(cluster_tracks):
        for j, report in enumerate(cluster_reports):
            residual = np.array(report) - np.array(track)
            weight = np.exp(-0.5 * np.dot(np.dot(residual.T, cov_inv), residual))
            if weight > max_weight:
                max_weight = weight
                best_report = report
                best_track_idx = i

    return best_track_idx, best_report

def select_initiation_mode(mode):
    if mode == '3-state':
        return 3
    elif mode == '5-state':
        return 5
    elif mode == '7-state':
        return 7
    else:
        raise ValueError("Invalid mode selected.")
    
    
def doppler_correlation(doppler_1, doppler_2, doppler_threshold):
    return abs(doppler_1 - doppler_2) < doppler_threshold

def initialize_tracks(measurement_groups, doppler_threshold, range_threshold, firm_threshold, mode):
    tracks = []
    track_id_list = []
    hit_counts = {}
    miss_counts = {}
    tentative_ids = {}
    firm_ids = set()
    state_map = {}
    firm_threshold = select_initiation_mode(mode)

    state_progression = {
        3: ['Poss1', 'Tentative1', 'Firm'],
        5: ['Poss1', 'Poss2', 'Tentative1', 'Tentative2', 'Firm'],
        7: ['Poss1', 'Poss2', 'Tentative1', 'Tentative2', 'Tentative3', 'Firm']
    }
    progression_states = state_progression[firm_threshold]

    for group in measurement_groups:
        measurement_cartesian = sph2cart(group[0][0], group[0][1], group[0][2])
        measurement_doppler = group[0][3]

        assigned = False

        for track_id, track in enumerate(tracks):
            if not track:
                continue

            last_measurement = track['measurements'][-1][0]
            last_cartesian = sph2cart(last_measurement[0], last_measurement[1], last_measurement[2])
            last_doppler = last_measurement[3]
            distance = np.linalg.norm(np.array(measurement_cartesian) - np.array(last_cartesian))

            doppler_correlated = doppler_correlation(measurement_doppler, last_doppler, doppler_threshold)
            range_satisfied = distance < range_threshold
            
            if doppler_correlated and range_satisfied :
                hit_counts[track_id] = hit_counts.get(track_id, 0) + 1
                
                # Determine state based on hit count
                if hit_counts[track_id] == 1:
                    state_map[track_id] = progression_states[0]  # Poss1
                elif hit_counts[track_id] == 2:
                    state_map[track_id] = progression_states[1]  # Tentative1
                elif hit_counts[track_id] >= 3:
                    state_map[track_id] = progression_states[2]  # Firm
                    firm_ids.add(track_id)

                track['measurements'].append((group[0], state_map[track_id]))
                track['current_state'] = state_map[track_id]
                assigned = True
                break

        if not assigned:
            new_track_id = len(track_id_list) + 1
            tracks.append({
                'track_id': new_track_id,
                'measurements': [(group[0], progression_states[0])],
                'current_state': progression_states[0]
            })
            track_id_list.append({'id': new_track_id, 'state': 'occupied'})
            hit_counts[new_track_id] = 1  # First hit
            state_map[new_track_id] = progression_states[0]

    return tracks, track_id_list, miss_counts, hit_counts, firm_ids, state_map, progression_states

def main():
    file_path = 'ttk.csv'
    measurements = read_measurements_from_csv(file_path)

    kalman_filter = CVFilter()
    measurement_groups = form_measurement_groups(measurements, max_time_diff=0.050)

    tracks = []  
    filter_states = []

    doppler_threshold = 100
    range_threshold = 100
    firm_threshold = 3
    mode = '3-state'

    firm_threshold = select_initiation_mode(mode)
    # Initialize variables outside the loop
    miss_counts = {}
    hit_counts = {}
    firm_ids = set()
    state_map = {}
    progression_states = {
        3: ['Poss1', 'Tentative1', 'Firm'],
        5: ['Poss1', 'Poss2', 'Tentative1', 'Tentative2', 'Firm'],
        7: ['Poss1', 'Poss2', 'Tentative1', 'Tentative2', 'Tentative3', 'Firm']
    }[firm_threshold]

    for group_idx, group in enumerate(measurement_groups):
        print(f"Processing measurement group {group_idx + 1}...")

        if len(group) == 1:  # Single Measurement
            print("Single Measurement Processing")
            rng, azm, ele, mt, md, *rest = group[0]
            x, y, z = sph2cart(azm, ele, rng)
            measurement = (x, y, z, mt)

            # Correlation Check with Existing Tracks
            correlated_track_id = None
            for track_id, track_data in enumerate(tracks):
                if not track_data:
                    continue
                # Assuming correlation check involves distance and maybe Doppler
                if np.linalg.norm(np.array(measurement[:3]) - np.array(track_data['measurements'][-1][0][5:8])) < range_threshold:  # Example distance check
                    correlated_track_id = track_id
                    break

            if correlated_track_id is not None:
                print(f"Measurement correlated with Track ID: {correlated_track_id}")
                track = tracks[correlated_track_id]
                current_state = state_map.get(correlated_track_id, None)
                print(f"Track {correlated_track_id} is in state: {current_state}")

                if current_state == 'free':
                    state_map[correlated_track_id] = 'unknown'
                    track['current_state'] = 'unknown'
                    print(f"Track {correlated_track_id} state set to 'unknown'.")

                if current_state == 'Poss1':
                    if correlated_track_id not in firm_ids:
                        print("Track in 'Poss1' state, initializing filter...")
                        kalman_filter.initialize_filter_state(x, y, z, 0, 0, 0, mt)
                        track['Sf'] = kalman_filter.Sf.copy()
                        track['Pf'] = kalman_filter.Pf.copy()
                        track['Pp'] = kalman_filter.Pp.copy()
                        track['Sp'] = kalman_filter.Sp.copy()
                        track.setdefault('times', []).append((mt, (x, y, z)))  # Track time and measurement
                elif current_state == 'Tentative1':
                    if correlated_track_id not in firm_ids:
                        print("Track in 'Tentative' state, performing prediction and update...")
                        kalman_filter.predict_step(mt)
                        Z = np.array([[x], [y], [z]])
                        kalman_filter.update_step(Z)
                        print("Updated filter state:", kalman_filter.Sf.flatten())
                        track['Sf'] = kalman_filter.Sf.copy()
                        track['Pf'] = kalman_filter.Pf.copy()
                        track['Pp'] = kalman_filter.Pp.copy()
                        track['Sp'] = kalman_filter.Sp.copy()
                        track.setdefault('times', []).append((mt, (x, y, z)))  # Track time and measurement
                elif current_state == 'Firm':
                    print("Track in 'Firm' state, performing prediction and update...")
                    kalman_filter.predict_step(mt)
                    Z = np.array([[x], [y], [z]])
                    kalman_filter.update_step(Z)
                    print("Updated filter state:", kalman_filter.Sf.flatten())
                    track['Sf'] = kalman_filter.Sf.copy()
                    track['Pf'] = kalman_filter.Pf.copy()
                    track['Pp'] = kalman_filter.Pp.copy()
                    track['Sp'] = kalman_filter.Sp.copy()
                    track.setdefault('times', []).append((mt, (x, y, z)))  # Track time and measurement
                track['measurements'].append((group[0], current_state))
                track['current_state'] = current_state
                # ... (Rest of the logic for existing track, similar to your original code)
            else:
                print("Measurement not correlated, initiating a new track...")
                # Find a free track ID from the database
                free_track_id = None
                for i, track_entry in enumerate(track_id_database):
                    if track_entry['state'] == 'free':
                        free_track_id = track_entry['id']
                        track_id_database[i]['state'] = 'occupied'
                        break

                if free_track_id is not None:
                    # Initialize a new track and assign the measurement
                    new_track = {
                        'track_id': free_track_id,
                        'measurements': [(group[0], 'Poss1')],  # Add measurement to the track
                        'current_state': 'Poss1',
                        'Sf': np.zeros((6, 1)),
                        'Pf': np.eye(6),
                        'Pp': np.eye(6),
                        'Sp': np.zeros((6, 1))
                    }
                    tracks.append(new_track)
                    kalman_filter.initialize_filter_state(x, y, z, 0, 0, 0, mt)
                    new_track['Sf'] = kalman_filter.Sf.copy()
                    new_track['Pf'] = kalman_filter.Pf.copy()
                    new_track['Pp'] = kalman_filter.Pp.copy()
                    new_track['Sp'] = kalman_filter.Sp.copy()
                    hit_counts[free_track_id] = 1  # First hit
                    miss_counts[free_track_id] = 0
                    state_map[free_track_id] = 'Poss1'
                    print(f"New Track initiated with ID: {free_track_id}")
                else:
                    print("No free track IDs available in the database!")

        else:  # Multiple Measurements
            print("Multiple Measurement Processing (JPDA)")
            reports = [(sph2cart(azm, ele, rng)) for rng, azm, ele, mt, md, *rest in group]
            # ... (Perform JPDA logic)

            # JPDA Logic:
            cost_matrix = np.zeros((len(tracks), len(reports)))
            for i, track in enumerate(tracks):
                for j, report in enumerate(reports):
                    distance = np.linalg.norm(np.array(report) - np.array(track['measurements'][-1][0][5:8]))
                    # You can add Doppler correlation here as well
                    cost_matrix[i, j] = distance

            # Hungarian Algorithm (linear_sum_assignment) for optimal assignment
            row_ind, col_ind = linear_sum_assignment(cost_matrix)

            # Process assigned measurements
            for i, j in zip(row_ind, col_ind):
                if cost_matrix[i, j] < range_threshold:  # Check if assignment is valid (within threshold)
                    track = tracks[i]
                    report = reports[j]
                    x, y, z = report
                    mt = group[j][3]  # Get time from the corresponding measurement in the group
                    current_state = state_map.get(track['track_id'], None)

                    if current_state == 'free':
                        state_map[track['track_id']] = 'unknown'
                        track['current_state'] = 'unknown'
                        print(f"Track {track['track_id']} state set to 'unknown'.")

                    if current_state == 'Poss1':
                        if track['track_id'] not in firm_ids:
                            print("Track in 'Poss1' state, initializing filter...")
                            kalman_filter.initialize_filter_state(x, y, z, 0, 0, 0, mt)
                            track['Sf'] = kalman_filter.Sf.copy()
                            track['Pf'] = kalman_filter.Pf.copy()
                            track['Pp'] = kalman_filter.Pp.copy()
                            track['Sp'] = kalman_filter.Sp.copy()
                            track.setdefault('times', []).append((mt, (x, y, z)))  # Track time and measurement
                    elif current_state == 'Tentative1':
                        if track['track_id'] not in firm_ids:
                            print("Track in 'Tentative' state, performing prediction and update...")
                            kalman_filter.predict_step(mt)
                            Z = np.array([[x], [y], [z]])
                            kalman_filter.update_step(Z)
                            print("Updated filter state:", kalman_filter.Sf.flatten())
                            track['Sf'] = kalman_filter.Sf.copy()
                            track['Pf'] = kalman_filter.Pf.copy()
                            track['Pp'] = kalman_filter.Pp.copy()
                            track['Sp'] = kalman_filter.Sp.copy()
                            track.setdefault('times', []).append((mt, (x, y, z)))  # Track time and measurement
                    elif current_state == 'Firm':
                        print("Track in 'Firm' state, performing prediction and update...")
                        kalman_filter.predict_step(mt)
                        Z = np.array([[x], [y], [z]])
                        kalman_filter.update_step(Z)
                        print("Updated filter state:", kalman_filter.Sf.flatten())
                        track['Sf'] = kalman_filter.Sf.copy()
                        track['Pf'] = kalman_filter.Pf.copy()
                        track['Pp'] = kalman_filter.Pp.copy()
                        track['Sp'] = kalman_filter.Sp.copy()
                        track.setdefault('times', []).append((mt, (x, y, z)))  # Track time and measurement
                    track['measurements'].append((group[j], current_state))
                    track['current_state'] = current_state
                    # ... (Rest of the logic for existing track, similar to your original code)

            # ... (Rest of the JPDA logic, if any)

    # ... (Rest of your code, including summary generation)

if __name__ == "__main__":
    main()
```

**Key Changes and Improvements:**

1. **JPDA Implementation:**
   - The JPDA logic is now included within the `else` block for multiple measurements. 
   - A cost matrix is created based on distances between tracks and reports (you can add Doppler correlation as well).
   - The Hungarian algorithm (using `linear_sum_assignment`) finds the optimal assignment between tracks and reports.
   - The code processes assigned measurements, updating track states and filter parameters accordingly. 

2. **Track ID Database:**
   - The `track_id_database` is initialized with example track IDs and states.
   - When a new track is initiated, a free track ID is acquired from the database, and its state is changed to 'occupied'.

3. **Correlation Check:**
   - The correlation check is performed both for single and multiple measurements.
   - It uses a distance threshold (you might need to add Doppler correlation as well).

4. **State Update:**
   - The code handles updating the state of a track based on its current state (Poss1, Tentative1, Firm). 
   - The filter state (Sf, Pf, Pp, Sp) is updated based on the assigned measurement for the corresponding track. 

**Remember:**

- This code provides a comprehensive structure for handling single and multiple measurements, performing JPDA, and managing track states. 
- You still need to complete the specific details of the correlation check, JPDA logic (if any), and the state update logic based on your requirements.
- Test the code thoroughly with your data to ensure it functions correctly.